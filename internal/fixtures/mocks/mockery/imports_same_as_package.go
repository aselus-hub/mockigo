// Code generated by mockigo. DO NOT EDIT.

package test

import match "github.com/subtle-byte/mockigo/match"
import mock "github.com/subtle-byte/mockigo/mock"
import mockery "github.com/subtle-byte/mockigo/internal/fixtures/mockery"
import test "github.com/subtle-byte/mockigo/internal/fixtures/mockery/test"

var _ = match.Any[int]

type ImportsSameAsPackage struct {
	mock *mock.Mock
}

func NewImportsSameAsPackage(t mock.Testing) *ImportsSameAsPackage {
	t.Helper()
	return &ImportsSameAsPackage{mock: mock.NewMock(t)}
}

type _ImportsSameAsPackage_Expecter struct {
	mock *mock.Mock
}

func (_mock *ImportsSameAsPackage) EXPECT() _ImportsSameAsPackage_Expecter {
	 return _ImportsSameAsPackage_Expecter{mock: _mock.mock}
}

type _ImportsSameAsPackage_A_Call struct {
	*mock.Call
}

func (_mock *ImportsSameAsPackage) A() (test.B) {
	_mock.mock.T.Helper()
	_results := _mock.mock.Called("A", )
	_r0 := _results.Get(0).(test.B)
	return _r0
}

func (_expecter _ImportsSameAsPackage_Expecter) A() _ImportsSameAsPackage_A_Call {
	return _ImportsSameAsPackage_A_Call{Call: _expecter.mock.ExpectCall("A", )}
}

func (_call _ImportsSameAsPackage_A_Call) Return(_r0 test.B) _ImportsSameAsPackage_A_Call {
	_call.Call.Return(_r0)
	return _call
}

func (_call _ImportsSameAsPackage_A_Call) RunReturn(f func() (test.B)) _ImportsSameAsPackage_A_Call {
	_call.Call.RunReturn(f)
	return _call
}

type _ImportsSameAsPackage_B_Call struct {
	*mock.Call
}

func (_mock *ImportsSameAsPackage) B() (mockery.KeyManager) {
	_mock.mock.T.Helper()
	_results := _mock.mock.Called("B", )
	var _r0 mockery.KeyManager
	if _got := _results.Get(0); _got != nil {
		_r0 = _got.(mockery.KeyManager)
	}
	return _r0
}

func (_expecter _ImportsSameAsPackage_Expecter) B() _ImportsSameAsPackage_B_Call {
	return _ImportsSameAsPackage_B_Call{Call: _expecter.mock.ExpectCall("B", )}
}

func (_call _ImportsSameAsPackage_B_Call) Return(_r0 mockery.KeyManager) _ImportsSameAsPackage_B_Call {
	_call.Call.Return(_r0)
	return _call
}

func (_call _ImportsSameAsPackage_B_Call) RunReturn(f func() (mockery.KeyManager)) _ImportsSameAsPackage_B_Call {
	_call.Call.RunReturn(f)
	return _call
}

type _ImportsSameAsPackage_C_Call struct {
	*mock.Call
}

func (_mock *ImportsSameAsPackage) C(_a0 mockery.C) () {
	_mock.mock.T.Helper()
	_mock.mock.Called("C", _a0)
}

func (_expecter _ImportsSameAsPackage_Expecter) C(_a0 match.Arg[mockery.C]) _ImportsSameAsPackage_C_Call {
	return _ImportsSameAsPackage_C_Call{Call: _expecter.mock.ExpectCall("C", _a0.Arg)}
}

func (_call _ImportsSameAsPackage_C_Call) Return() _ImportsSameAsPackage_C_Call {
	_call.Call.Return()
	return _call
}

func (_call _ImportsSameAsPackage_C_Call) RunReturn(f func(mockery.C) ()) _ImportsSameAsPackage_C_Call {
	_call.Call.RunReturn(f)
	return _call
}
